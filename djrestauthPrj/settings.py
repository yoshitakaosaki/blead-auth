"""
Django settings for djrestauthPrj project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-$p#o8+16)ptb_f9av-ew(#e9okfq13&%-$by089$x#f&1=8a(w'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    'corsheaders',
    
    'rest_framework',
    'rest_framework.authtoken',  # トークン用
    'dj_rest_auth',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',   # 例：Googleを使う場合
    'allauth.socialaccount.providers.facebook', # 例：Facebookを使う場合
    'allauth.socialaccount.providers.github',   # 例：GitHubを使う場合
    'allauth.socialaccount.providers.line',     # （LINE プロバイダ）
    'allauth.socialaccount.providers.instagram', # （Instagram プロバイダ）
    'allauth.socialaccount.providers.twitter', # （Twitter プロバイダ）
    'allauth.socialaccount.providers.linkedin_oauth2', # （LinkedIn プロバイダ）
    'allauth.socialaccount.providers.microsoft', # （Microsoft プロバイダ）
    'allauth.socialaccount.providers.apple', # （Apple プロバイダ）
    'allauth.socialaccount.providers.amazon', # （Amazon プロバイダ）
    'allauth.socialaccount.providers.reddit', # （Reddit プロバイダ）
    'allauth.socialaccount.providers.spotify', # （Spotify プロバイダ）
    'allauth.socialaccount.providers.discord', # （Discord プロバイダ）
    'allauth.socialaccount.providers.slack', # （Slack プロバイダ）
  #  'allauth.socialaccount.providers.steam', # （Steam プロバイダ）
    'allauth.socialaccount.providers.twitch', # （Twitch プロバイダ）

]

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

REST_USE_JWT = True

SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('JWT',),
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    'allauth.account.middleware.AccountMiddleware',  # ★これを追加
    
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',  # corsheadersの後にcommon
]

ROOT_URLCONF = 'djrestauthPrj.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djrestauthPrj.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'authorized',
        'USER': 'authorized',
        'PASSWORD': 'authorized',
        'HOST': 'localhost',        # or IP address or service name
        'PORT': '5432',             # PostgreSQL の標準ポート
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True
USE_L10N = True
USE_TZ = True

USE_SITE = 1

CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
]

# CSRF設定
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:3000',
    'http://127.0.0.1:3000',
]

CORS_ALLOW_CREDENTIALS = True
# RS_ALLOW_ALL_ORIGINS = True  # テスト用、開発中ならこれでOK！

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
